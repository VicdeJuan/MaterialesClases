
# This file was *autogenerated* from the file eqnGenerator.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_10 = Integer(10); _sage_const_30 = Integer(30)
import re
var('x')
def _latex(ss):
    s=str(ss)
    for gs in map(list,re.findall("([0-9]+)/([0-9]+)",s)):
        s=re.sub(gs[_sage_const_0 ]+"/"+gs[_sage_const_1 ],"\\\\frac{"+gs[_sage_const_0 ]+"}{"+gs[_sage_const_1 ]+"}",s)
    s=s.replace("*","")
    return s    
    
def str_eqn(s,funstr):
    return funstr(s)
        
def eqn_generator(sumandos,iteraciones,solucion,max,lat,numeq,print_sol,numop):
    eqns = []
    for i in xrange(sumandos):
        eqn = x==solucion
        for j in xrange(iteraciones):
            op = int(uniform(_sage_const_1 ,numop+_sage_const_1 ))
            if op==_sage_const_1 :
                if uniform(_sage_const_1 ,_sage_const_3 ) > _sage_const_2 :
                    eqn += int(uniform(_sage_const_2 ,max))*x
                else:
                    eqn += int(uniform(_sage_const_1 ,max))
            if op==_sage_const_2 :
                if uniform(_sage_const_1 ,_sage_const_3 ) > _sage_const_2 :
                    eqn -= int(uniform(_sage_const_2 ,max))*x
                else:
                    eqn -= int(uniform(_sage_const_1 ,max))
            if op==_sage_const_3 :
                eqn *= int(uniform(_sage_const_2 ,_sage_const_6 ))
            if op==_sage_const_4 :
                eqn /= int(uniform(_sage_const_2 ,max))

        eqns.append(eqn)
    if lat:
        left = "+".join([str_eqn(eqn.left(),_latex) for eqn in eqns])
        right= "+".join([str_eqn(eqn.right(),_latex) for eqn in eqns])
    else:
        left = "+".join([str_eqn(eqn.left(),str) for eqn in eqns])
        right= "+".join([str_eqn(eqn.right(),str) for eqn in eqns])
    retval = (left+"="*numeq+right).replace("+-","-")
    if lat:
        retval = "\\["+retval+"\\]"
        if print_sol:
            retval = "Sol: " + str(solucion) + ":" + retval
    return retval

 
for i in xrange(_sage_const_30 ):
    sol=i-_sage_const_10 
    print(eqn_generator(sumandos = _sage_const_3 , iteraciones = _sage_const_8 ,solucion = sol, max = _sage_const_10  ,lat = True, numeq = _sage_const_1 ,print_sol = True,numop=_sage_const_4 ))
    print 
    print

